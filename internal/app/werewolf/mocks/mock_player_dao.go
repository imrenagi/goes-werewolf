// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/imrenagi/goes-werewolf/internal/app/werewolf/services (interfaces: PlayerDAO)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/imrenagi/goes-werewolf/internal/app/werewolf/models"
	reflect "reflect"
)

// MockPlayerDAO is a mock of PlayerDAO interface
type MockPlayerDAO struct {
	ctrl     *gomock.Controller
	recorder *MockPlayerDAOMockRecorder
}

// MockPlayerDAOMockRecorder is the mock recorder for MockPlayerDAO
type MockPlayerDAOMockRecorder struct {
	mock *MockPlayerDAO
}

// NewMockPlayerDAO creates a new mock instance
func NewMockPlayerDAO(ctrl *gomock.Controller) *MockPlayerDAO {
	mock := &MockPlayerDAO{ctrl: ctrl}
	mock.recorder = &MockPlayerDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPlayerDAO) EXPECT() *MockPlayerDAOMockRecorder {
	return m.recorder
}

// GetDoctor mocks base method
func (m *MockPlayerDAO) GetDoctor(arg0 string) (*models.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDoctor", arg0)
	ret0, _ := ret[0].(*models.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDoctor indicates an expected call of GetDoctor
func (mr *MockPlayerDAOMockRecorder) GetDoctor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDoctor", reflect.TypeOf((*MockPlayerDAO)(nil).GetDoctor), arg0)
}

// GetPlayerWithID mocks base method
func (m *MockPlayerDAO) GetPlayerWithID(arg0, arg1 string) (*models.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayerWithID", arg0, arg1)
	ret0, _ := ret[0].(*models.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayerWithID indicates an expected call of GetPlayerWithID
func (mr *MockPlayerDAOMockRecorder) GetPlayerWithID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayerWithID", reflect.TypeOf((*MockPlayerDAO)(nil).GetPlayerWithID), arg0, arg1)
}

// GetPlayers mocks base method
func (m *MockPlayerDAO) GetPlayers(arg0 string) ([]models.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayers", arg0)
	ret0, _ := ret[0].([]models.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayers indicates an expected call of GetPlayers
func (mr *MockPlayerDAOMockRecorder) GetPlayers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayers", reflect.TypeOf((*MockPlayerDAO)(nil).GetPlayers), arg0)
}

// GetSeer mocks base method
func (m *MockPlayerDAO) GetSeer(arg0 string) (*models.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeer", arg0)
	ret0, _ := ret[0].(*models.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSeer indicates an expected call of GetSeer
func (mr *MockPlayerDAOMockRecorder) GetSeer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeer", reflect.TypeOf((*MockPlayerDAO)(nil).GetSeer), arg0)
}

// GetVillager mocks base method
func (m *MockPlayerDAO) GetVillager(arg0, arg1 string) (*models.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVillager", arg0, arg1)
	ret0, _ := ret[0].(*models.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVillager indicates an expected call of GetVillager
func (mr *MockPlayerDAOMockRecorder) GetVillager(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVillager", reflect.TypeOf((*MockPlayerDAO)(nil).GetVillager), arg0, arg1)
}

// GetWolf mocks base method
func (m *MockPlayerDAO) GetWolf(arg0, arg1 string) ([]models.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWolf", arg0, arg1)
	ret0, _ := ret[0].([]models.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWolf indicates an expected call of GetWolf
func (mr *MockPlayerDAOMockRecorder) GetWolf(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWolf", reflect.TypeOf((*MockPlayerDAO)(nil).GetWolf), arg0, arg1)
}

// GetWolves mocks base method
func (m *MockPlayerDAO) GetWolves(arg0 string) ([]models.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWolves", arg0)
	ret0, _ := ret[0].([]models.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWolves indicates an expected call of GetWolves
func (mr *MockPlayerDAOMockRecorder) GetWolves(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWolves", reflect.TypeOf((*MockPlayerDAO)(nil).GetWolves), arg0)
}

// SavePlayer mocks base method
func (m *MockPlayerDAO) SavePlayer(arg0 string, arg1 models.Player) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePlayer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePlayer indicates an expected call of SavePlayer
func (mr *MockPlayerDAOMockRecorder) SavePlayer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePlayer", reflect.TypeOf((*MockPlayerDAO)(nil).SavePlayer), arg0, arg1)
}
