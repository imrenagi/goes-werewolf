// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/imrenagi/goes-werewolf/internal/app/werewolf/states (interfaces: Context)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	states "github.com/imrenagi/goes-werewolf/internal/app/werewolf/states"
	reflect "reflect"
)

// MockContext is a mock of Context interface
type MockContext struct {
	ctrl     *gomock.Controller
	recorder *MockContextMockRecorder
}

// MockContextMockRecorder is the mock recorder for MockContext
type MockContextMockRecorder struct {
	mock *MockContext
}

// NewMockContext creates a new mock instance
func NewMockContext(ctrl *gomock.Controller) *MockContext {
	mock := &MockContext{ctrl: ctrl}
	mock.recorder = &MockContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockContext) EXPECT() *MockContextMockRecorder {
	return m.recorder
}

// GameID mocks base method
func (m *MockContext) GameID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GameID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GameID indicates an expected call of GameID
func (mr *MockContextMockRecorder) GameID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GameID", reflect.TypeOf((*MockContext)(nil).GameID))
}

// GetDay mocks base method
func (m *MockContext) GetDay() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDay")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetDay indicates an expected call of GetDay
func (mr *MockContextMockRecorder) GetDay() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDay", reflect.TypeOf((*MockContext)(nil).GetDay))
}

// SetState mocks base method
func (m *MockContext) SetState(arg0 states.State) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetState", arg0)
}

// SetState indicates an expected call of SetState
func (mr *MockContextMockRecorder) SetState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetState", reflect.TypeOf((*MockContext)(nil).SetState), arg0)
}
