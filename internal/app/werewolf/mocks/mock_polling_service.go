// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/imrenagi/goes-werewolf/internal/app/werewolf/states (interfaces: PollingService)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/imrenagi/goes-werewolf/internal/app/werewolf/models"
	reflect "reflect"
)

// MockPollingService is a mock of PollingService interface
type MockPollingService struct {
	ctrl     *gomock.Controller
	recorder *MockPollingServiceMockRecorder
}

// MockPollingServiceMockRecorder is the mock recorder for MockPollingService
type MockPollingServiceMockRecorder struct {
	mock *MockPollingService
}

// NewMockPollingService creates a new mock instance
func NewMockPollingService(ctrl *gomock.Controller) *MockPollingService {
	mock := &MockPollingService{ctrl: ctrl}
	mock.recorder = &MockPollingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPollingService) EXPECT() *MockPollingServiceMockRecorder {
	return m.recorder
}

// GetMostVotedPlayer mocks base method
func (m *MockPollingService) GetMostVotedPlayer(arg0, arg1 string) (*models.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMostVotedPlayer", arg0, arg1)
	ret0, _ := ret[0].(*models.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMostVotedPlayer indicates an expected call of GetMostVotedPlayer
func (mr *MockPollingServiceMockRecorder) GetMostVotedPlayer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMostVotedPlayer", reflect.TypeOf((*MockPollingService)(nil).GetMostVotedPlayer), arg0, arg1)
}

// NewPollID mocks base method
func (m *MockPollingService) NewPollID(arg0, arg1 string, arg2 int, arg3 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewPollID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	return ret0
}

// NewPollID indicates an expected call of NewPollID
func (mr *MockPollingServiceMockRecorder) NewPollID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewPollID", reflect.TypeOf((*MockPollingService)(nil).NewPollID), arg0, arg1, arg2, arg3)
}
